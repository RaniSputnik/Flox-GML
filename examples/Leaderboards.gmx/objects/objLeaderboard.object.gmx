<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Flox

var gameId = "6nkPAV2gLb4u82dr";
var gameKey = "OWqrbbJiwIArWLlY";
// This can be whatever you like, it is used to keep track
// of what version of your game players are playing.
var gameVersion = "0.1";
// Initialize flox with all the settings above
flox_init(gameId,gameKey,gameVersion);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Leaderboard settings

// The current error message
self.error = "";
// A ds list of all the highscores
self.scores = noone;
// The id of the leaderboard to load, you must
// set this up in the flox control panel
self.leaderboardId = "test-leaderboard";
// The scope of the scores to load, one of the following;
// fx_today, fx_this_week or fx_all_time
// Alternatively you can use a ds list of all the player
// ids that you want to fetch
self.scope = fx_this_week;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>objLeaderboardLoader</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all the scores

var xx = x;
var yy = y;

// Draw the current error
if self.error != "" {
    draw_set_color(c_red);
    draw_set_halign(fa_left);
    draw_text_ext(xx,yy,self.error,0,room_width-xx*2);
    yy += string_height_ext(self.error,0,room_width-xx*2);
    yy += 4;
}
draw_set_color(c_black);

// Check if the high scores list exists
if ds_exists(self.scores,ds_type_list) {
    // Loop over every score in the high scores list
    var n = min(ds_list_size(self.scores),20);
    for (var i = 0; i &lt; n; i++) {
        // Get the score at position i from the high scores list
        var scoreMap = ds_list_find_value(self.scores,i);
        // Get all the values from this score
        var playerId = ds_map_find_value(scoreMap,"playerId");
        var playerName = ds_map_find_value(scoreMap,"playerName");
        var value = ds_map_find_value(scoreMap,"value");
        var date = ds_map_find_value(scoreMap,"date");
        var country = ds_map_find_value(scoreMap,"country");
        
        // Draw the position and player name to the left of the screen
        draw_set_halign(fa_left);
        draw_text(xx,yy,string(i+1)+". "+playerName);
        // Then draw the score to the right of the room
        draw_set_halign(fa_right);
        draw_text(room_width-xx,yy,string(value));
        
        // Increment y so we draw the next score lower
        yy += 16;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
