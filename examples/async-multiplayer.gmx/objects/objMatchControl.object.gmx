<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup the game

var game = instance_find(objGame,0);
match = game.currentMatch;
ourTurn = false;

var me = flox_player_get();

var waitingForPlayer = flox_entity_get(match,"waitingForPlayer");
// It is our turn, the match is waiting for us
if (waitingForPlayer == flox_entity_get(me,fx_id)) {
    // It's our turn
    ourTurn = true;
}
// It is the opponents turn so show the waiting screen
else ourTurn = false;

// Create the birds 
var me = flox_player_get();
var myId = flox_entity_get(me,fx_id);
var matchOwnerId = flox_entity_get(match,fx_owner_id);
var matchOwnedByMe = (myId == matchOwnerId);

// Get the turns the players have made so far
var p1Turns,p2Turns;
if (matchOwnedByMe) {
    p1Turns = flox_entity_get(match,"ownerTurns");
    p2Turns = flox_entity_get(match,"opponentTurns");
}
else {
    p1Turns = flox_entity_get(match,"opponentTurns");
    p2Turns = flox_entity_get(match,"ownerTurns");
}

// Create a red bird for each p1 turn and a purple bird for each p2 turn
scrPlaceBirds(p1Turns,objBird);
scrPlaceBirds(p2Turns,objBirdP2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ourTurn {
    
    var me = flox_player_get();
    var myId = flox_entity_get(me,fx_id);
    var matchOwnerId = flox_entity_get(match,fx_owner_id);
    var matchOwnedByMe = (myId == matchOwnerId);
    
    var xx = round(mouse_x);
    var yy = round(mouse_y);
    var bird = instance_create(xx,yy,objBird);
    
    var turns,otherId;
    if (matchOwnedByMe) {
        turns = flox_entity_get(match,"ownerTurns");
        otherId = flox_entity_get(match,"opponentId");
    }
    else {
        turns = flox_entity_get(match,"opponentTurns");
        otherId = flox_entity_get(match,fx_owner_id);
    }
    
    var str = string(xx)+","+string(yy);
    ds_list_add(turns,str);
    flox_entity_set(match,"waitingForPlayer",otherId);
    flox_entity_save_queued(match);
    
    ourTurn = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not ourTurn {
    draw_sprite_tiled_ext(sprWaiting,0,0,0,1,1,c_white,0.8);
    draw_set_font(fntFlox);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_text(room_width/2,room_height/2,"Waiting for opponent");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
