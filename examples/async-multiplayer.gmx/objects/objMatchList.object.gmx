<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up the layout/graphics settings

selectedIndex = -1;
cellPadding    = 2;
cellHeight     = 48;
defaultColor   = c_white;
highlightColor = make_color_rgb(220,220,220);
myTurnColor    = make_color_rgb(70,148,255); 
myTurnHighlightColor = make_color_rgb(99,165,231);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start loading the matches

var player = flox_player_get();
var playerId = flox_entity_get(player,"id");

loading = true;
matchesToDisplay = ds_list_create();
// Query all matches from the server
flox_query_begin("Match");
// Filter them by removing any that do not include us as the
// owner or the opponent
flox_query_where("ownerId == ? OR opponentId == ?",playerId,playerId);
flox_query_find(scrMatchListComplete,scrMatchListError);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the game that we are hovering over
selectedIndex = floor((mouse_y - y)/cellHeight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If the mouse is over a game
var nMatches = ds_list_size(matchesToDisplay);
if selectedIndex &gt; -1 and selectedIndex &lt; nMatches {
    // If that game is loaded then resume it
    var selectedMatch = ds_list_find_value(matchesToDisplay,selectedIndex);
    if is_real(selectedMatch) {
        scrSetCurrentMatch(selectedMatch);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all the matches currently loaded

var me = flox_player_get();
var myId = flox_entity_get(me,fx_id);
var insetText = 10;
var halfHeight = cellHeight&gt;&gt;1;
var halfPadding = cellPadding&gt;&gt;1;

draw_set_color(c_ltgray);
draw_rectangle(0,y,room_width,room_height,false);

draw_set_font(fntFlox);
draw_set_valign(fa_middle);

var n = ds_list_size(matchesToDisplay);
for (var i = 0; i &lt; n; i++) {
    var yy = y + i * cellHeight;
    var match = ds_list_find_value(matchesToDisplay,i);
    var matchLoading = is_string(match);
    
    // Calculate whether or not it is currently my turn in this game
    var myTurn = false;
    if not matchLoading 
        then myTurn = (flox_entity_get(match,"waitingForPlayer") == myId)
    
    // Calculate the colours for the background and text, blue if its my turn whiteish if it isn't
    // Will also highlight on/off when the user hovers
    var bgColor   = defaultColor;
    var textColor = c_dkgray;
    if (not matchLoading and myTurn) {
        textColor = c_white;
        if (i == selectedIndex) bgColor = myTurnColor;
        else bgColor = myTurnHighlightColor;
    }
    else if (i == selectedIndex) bgColor = highlightColor;
    
    // Draw the background
    draw_set_color(bgColor);
    draw_rectangle(cellPadding,yy+cellPadding,room_width-cellPadding*2,yy+cellHeight,false);
 
    // Draw the text
    draw_set_color(textColor);
    draw_set_halign(fa_left);
    if matchLoading {
        draw_text(insetText,yy+halfHeight-halfPadding,"Loading match with id: "+match);
    }
    else {
        var matchId = flox_entity_get(match,"id");
        draw_text(insetText,yy+halfHeight-halfPadding,"Match ("+matchId+") VS "+flox_entity_get(match,"opponentId"));
        draw_set_halign(fa_right);
        if myTurn {
            draw_text(room_width-insetText,yy+halfHeight-halfPadding,"It's your turn!");
        }
        else draw_text(room_width-insetText,yy+halfHeight-halfPadding,"Waiting for opponent");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show loading image

if loading {
    draw_sprite(sprLoading,image_index,room_width/2,room_height/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
