<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprButton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

self.request = noone;
self.loadingIndicator = noone;
self.error = "";
self.leaderboardId = "test-leaderboard";
self.list = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load the leaderboard

// One load at a time please
if self.request != noone then exit;
// Request the load
self.request = flox_leaderboard_load(self.leaderboardId,fx_all_time,
    scrLeaderboardLoadComplete,
    scrLeaderboardLoadError);    
// Create the loading indicator
var xx = x + sprite_width - (sprite_height*0.5);
var yy = y + (sprite_height*0.5);
self.loadingIndicator = instance_create(xx,yy,objLoading);
// Clear any error messages
self.error = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle when the leaderboard is loaded

show_debug_message('objLeaderboardList HTTP STATUS');

// If the request completed successfully
if flox_completed(self.request) {
    // Get the list of highscores
    self.list = self.request[? "result"];
    // Cleanup
    self.request = noone;
    with self.loadingIndicator instance_destroy();
}

// otherwise, if the request failed
else if flox_failed(self.request) {
    // Try to use the cached list of highscores
    self.list = self.request[? "cachedResult"];
    self.error = self.request[? "error"];
    // Cleanup
    self.request = noone;
    with self.loadingIndicator instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the button

draw_self();

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_text(x+16,y+16,"Load Leaderboard");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw any error text

if self.error != "" {
    draw_set_color(c_red);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_text(x,y+sprite_height+16,self.error);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the leaderboard scores

// If the list of scores exists
if ds_exists(self.list, ds_type_list) {
    var xx = x + 16;
    var yy = y + sprite_height + 16;
    if self.error != "" then yy += 32;
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);

    // For every score in the list
    var n = ds_list_size(self.list);
    for (var i = 0; i &lt; n; i++) {
        // Get the score data
        var scoreData = ds_list_find_value(self.list,i);
        var playerId = ds_map_find_value(scoreData,"playerId");
        var playerName = ds_map_find_value(scoreData,"playerName");
        var value = ds_map_find_value(scoreData,"value");
        var data = ds_map_find_value(scoreData,"date");
        var country = ds_map_find_value(scoreData,"country");
        // Work out where to draw the text
        draw_text(xx,yy,string(i+1)+". "+string(value)+" "+playerName);
        // Increment the position to draw the text
        yy += string_height("|") + 4;   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,16</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
