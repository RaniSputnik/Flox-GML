<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Whether or not to use https - USE IT (unless you are using an old version of GameMaker)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>secure</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Whether or not to print out debug information in the console</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>verbose</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Whether or not to report analytics data to the server</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>reportAnalytics</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Causes all requests to fail automatically, results will not be fetched from the cache</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>forceServiceFailure</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Prevents Flox from loading any previously saved data on start-up</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>preventPersistentDataLoad</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Prevents Flox from saving any new data to the cache</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>preventPersistentDataSave</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Internal required variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Internal setup

// Make sure there isn't more than one flox instance
flox_assert(instance_number(objFlox == 1),"You have created more than one objFlox instance, you do not need to include this object in your rooms, it will be instantiated for you");

// Whether or not flox has been initialized
self._initialized = false;
// Whether or not a fatal error has occurred, used to prevent
// Flox saving in an invalid state
self._fatalErrorOccurred = false;
// Whether or not the persistent data has been changed and
// requires another write to disk
self._persistentDataInvalid = false;

// Whether or not the service queue should start processing
// at the next available moment
self._serviceQueueShouldProcess = false;
// Whether or not the rest service is currently processing
// the list of queued requests
self._serviceProcessingQueue = false; 

// The current query being built
self._query = noone;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase the current session time
var session = map_get(self._persistentData,"session");
if map_exists(session) {
    var t = map_get(session,"duration");
    t += 1/room_speed;
    map_set(session,"duration",t);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process the service queue

if self._serviceQueueShouldProcess {
    self._serviceQueueShouldProcess = false;
    i_flox_service_queue_process();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Write data to disk if the persistent data has changed

if self._persistentDataInvalid {
    i_flox_persistent_save();
    self._persistentDataInvalid = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process a new repsonse from the server

var requestId = map_get(async_load,"id");
// Sometimes we can receive multiple responses for a single id,
// if this isn't the final response ignore it
if not map_has(async_load,"http_status") then exit;
// TODO need to investigate what causes this
// I suspect it is a forced network login like, for instance 
// when you are using free WiFi and you are forced to login every half hour or so
// The response may end up being HTML rather than the JSON response we are
// expecting

// If this request id exists in the service requests then this http response
// matches one of the flox requests that were dispatched
if map_has(self._serviceRequests,requestId) {
    // Determine event details
    var status = map_get(async_load,"status");
    var httpStatus = map_get(async_load,"http_status");
    var headers = map_get(async_load,"response_headers");
    var body = map_get(async_load,"result");
    // Print out debug messages if necessary
    flox_debug_message("Processing response");
    flox_debug_message("Response",json_encode(async_load));

    // Find the basic request info
    var requestInfo = map_get(self._serviceRequests,requestId);
    var method      = map_get(requestInfo,"method");
    var path        = map_get(requestInfo,"path");
    // The callback functions - always called back in the flox context
    var cache       = map_default(requestInfo,"cachedResult",noone);
    flox_debug_message("The cache is",cache);
    var onComplete  = map_default(requestInfo,"onComplete",noone);
    var onError     = map_default(requestInfo,"onError",noone);

    // If the request was not okay then the server could not be reached
    if not flox_http_status_is_success(httpStatus) {
        flox_debug_message("Flox server unreachable");
        if script_exists(onError)
            then script_execute(onError,requestInfo,"Flox server unreachable",httpStatus,cache);
    }
    // Deal with funny GameMaker status shenanigans
    else if status &lt; 0 and not map_exists(headers) {
        flox_debug_message("Flox server unreachable");
        if script_exists(onError)
            then script_execute(onError,requestInfo,"Flox server unreachable",http_status_unknown,cache);
    }
    // Even if the request succeeded we now must check whether or not the servers
    // Internal request was successful (We post to www.flox.cc/api with our request
    // and the server performs the request internally)
    else {
        var response = json_decode(body);
        // Respond to parse errors
        if not map_exists(response) {
            flox_debug_message("Invalid response from Flox server");
            var error = "Invalid response from Flox server: "+body;
            if script_exists(onError)
                then script_execute(onError,requestInfo,error,httpStatus,cache);
        }
        // The response was parsed successfully and should now be processed
        else {
            // If the request was successful
            if flox_http_status_is_success(httpStatus) {
                // If it is a get request then we cache and return
                if method == http_method_get {
                    // If the status was NOT_MODIFIED then we can simply
                    // return the existing cached copy
                    if httpStatus == http_status_not_modified {
                        // We may need to make a copy here rather than returning
                        // the raw cached result. If we make a copy then we will need
                        // to make sure it is manually deleted after the callback
                        response = cache;
                    }
                    // Otherwise if the entity has been modified then we need
                    // to update our cached copy 
                    else i_flox_cache_response(path,headers,response);
                }
                // A PUT request will update an entity on the server
                else if method == http_method_put {
                    // PUT requests carry a 'putInCache' property, this property is set
                    // to whatever is being saved to the server. In this way a PUT request
                    // can carry more parameters other than the entity, while just the entity
                    // is entered into the cache
                    /* TODO remove the putInCache hack, unnecessary now that
                    game maker handles arrays as top level json
                    var putInCache = map_get(requestInfo,"putInCache");
                    if flox_entity_exists(putInCache) {
                        if map_has(result,flox_created_at) and map_has(result,flox_updated_at) {
                            var createdAt = flox_date_decode(map_get(result,flox_created_at));
                            var updatedAt = flox_date_decode(map_get(result,flox_updated_at));
                            flox_entity_set(putInCache,flox_created_at,createdAt);
                            flox_entity_set(putInCache,flox_updated_at,updatedAt);
                        }
                        // Enter the entity into the service cache
                        i_flox_cache_response(path,headers,putInCache);
                    }*/
                }
                // If it is a delete request, delete the local copy too :)
                else if method == http_method_delete {
                    i_flox_cache_remove(path);
                }
                // We made it! SUCCESS! Now call the onComplete script
                if script_exists(onComplete)
                    then script_execute(onComplete,requestInfo,response,httpStatus);
            }
            // Otherwise the Flox response was an error status
            else {
                flox_debug_message("Http status was not a success");
                var error = "unknown";
                // Try and determine the error message
                if map_exists(result) and map_has(result,"message")
                    then error = map_get(result,"message");
                // Call the onError script
                if script_exists(onError)
                    then script_execute(onError,requestInfo,error,httpStatus,cache);
            }  
        }
        map_destroy(response);
    }
    map_destroy(requestInfo);
    map_delete(self._serviceRequests,requestId);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
